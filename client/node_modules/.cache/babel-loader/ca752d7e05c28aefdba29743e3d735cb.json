{"ast":null,"code":"var _jsxFileName = \"D:\\\\Implementation\\\\InsightMRI\\\\client\\\\src\\\\Components\\\\AnalysisResult.js\";\nimport React, { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './AnalysisResult.css';\nconst map = require(\"./savedmaps/heatmap_D_Implementation_InsightMRI_client_src_Components_savedmaps_uploadedImage.jpg\");\nconst AnalysisResult = () => {\n  const location = useLocation();\n  const {\n    image,\n    patientName,\n    patientId,\n    patientAge\n  } = location.state || {};\n  const [modelPrediction, setModelPrediction] = useState('');\n  const [heatMapImage, setHeatMapImage] = useState('');\n  const [analysisCompleted, setAnalysisCompleted] = useState(false);\n\n  // front end button call that generates the heatmap\n  const handleAnalysis = async () => {\n    if (!image) {\n      console.error('No image available for analysis');\n      return;\n    }\n    try {\n      const response = await fetch(image);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const blob = await response.blob();\n      const file = new File([blob], \"uploadedImage.jpg\", {\n        type: \"image/jpeg\"\n      });\n      const formData = new FormData();\n      formData.append('image', file);\n\n      // Send FormData to Flask backend\n      const data = await fetch('http://localhost:5000/explain', {\n        method: 'POST',\n        body: formData\n      });\n      const analysisData = await data.json();\n      console.log(\"Prediction Data:\", analysisData);\n      if (analysisData.error) {\n        console.error('Error from backend:', analysisData.error);\n        // Handle backend errors gracefully (e.g., display an error message to the user)\n        return;\n      }\n      setModelPrediction(analysisData.prediction); // Assuming predicted_class_name is available\n\n      // Update heatmap image using the provided path\n      setHeatMapImage(analysisData.heatmap_path); // Assuming heatmap_path is the path returned by the backend\n\n      setAnalysisCompleted(true);\n    } catch (error) {\n      console.error('Error:', error);\n      // Handle errors during image fetching or backend communication\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-result-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-result-card-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Image Analyze Results\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"We analyze your MRIs for you\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-result-card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"fetched-data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"Patient ID: \", patientId, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 60\n    }\n  }), \"Patient Name: \", patientName, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 94\n    }\n  }), \" Age: \", patientAge, \" \"), /*#__PURE__*/React.createElement(\"img\", {\n    src: image,\n    alt: \"Uploaded MRI\",\n    className: \"mri-image\",\n    style: {\n      width: '350px',\n      height: '350px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"analysis-actions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleAnalysis,\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"Run Analysis\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }), modelPrediction && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"model-prediction\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, \"Tumor Type\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"tumor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, modelPrediction)), heatMapImage && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"heat-map-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, \"Model Interpretation\"), /*#__PURE__*/React.createElement(\"img\", {\n    src: map,\n    alt: \"Heat Map\",\n    className: \"heat-map-image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  })), analysisCompleted && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"results-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, \"Save Results\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, \"Back\"))));\n};\nexport default AnalysisResult;","map":{"version":3,"names":["React","useState","useLocation","map","require","AnalysisResult","location","image","patientName","patientId","patientAge","state","modelPrediction","setModelPrediction","heatMapImage","setHeatMapImage","analysisCompleted","setAnalysisCompleted","handleAnalysis","console","error","response","fetch","ok","Error","status","blob","file","File","type","formData","FormData","append","data","method","body","analysisData","json","log","prediction","heatmap_path","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","style","width","height","onClick"],"sources":["D:/Implementation/InsightMRI/client/src/Components/AnalysisResult.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './AnalysisResult.css';\r\nconst map = require(\"./savedmaps/heatmap_D_Implementation_InsightMRI_client_src_Components_savedmaps_uploadedImage.jpg\");\r\n\r\nconst AnalysisResult = () => {\r\n\r\n  const location = useLocation();\r\n  const { image, patientName, patientId, patientAge } = location.state || {};\r\n  const [modelPrediction, setModelPrediction] = useState('');\r\n  const [heatMapImage, setHeatMapImage] = useState('');\r\n  const [analysisCompleted, setAnalysisCompleted] = useState(false);\r\n\r\n// front end button call that generates the heatmap\r\n  const handleAnalysis = async () => {\r\n\r\n    if (!image) {\r\n      console.error('No image available for analysis');\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      const response = await fetch(image);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n  \r\n      const blob = await response.blob();\r\n      const file = new File([blob], \"uploadedImage.jpg\", { type: \"image/jpeg\" });\r\n  \r\n      const formData = new FormData();\r\n      formData.append('image', file);\r\n  \r\n      // Send FormData to Flask backend\r\n      const data = await fetch('http://localhost:5000/explain', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n  \r\n      const analysisData = await data.json();\r\n      console.log(\"Prediction Data:\", analysisData);\r\n  \r\n      if (analysisData.error) {\r\n        console.error('Error from backend:', analysisData.error);\r\n        // Handle backend errors gracefully (e.g., display an error message to the user)\r\n        return;\r\n      }\r\n  \r\n      setModelPrediction(analysisData.prediction); // Assuming predicted_class_name is available\r\n  \r\n      // Update heatmap image using the provided path\r\n      setHeatMapImage(analysisData.heatmap_path);  // Assuming heatmap_path is the path returned by the backend\r\n  \r\n      setAnalysisCompleted(true);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      // Handle errors during image fetching or backend communication\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"analysis-result-card\">\r\n      <div className=\"analysis-result-card-header\">\r\n        <h1>Image Analyze Results</h1>\r\n        <p>We analyze your MRIs for you</p>\r\n      </div>\r\n      <div className=\"analysis-result-card-body\">\r\n        <p className='fetched-data'>Patient ID: {patientId}<br />Patient Name: {patientName} <br /> Age: {patientAge} </p>\r\n        <img src={image} alt=\"Uploaded MRI\" className=\"mri-image\" style={{ width: '350px', height: '350px' }}/>\r\n\r\n        <div className=\"analysis-actions\">\r\n          <button onClick={handleAnalysis} className=\"btn btn-primary\">Run Analysis</button>\r\n        </div>\r\n        <br></br>\r\n        {modelPrediction && (\r\n          <div className=\"model-prediction\">\r\n            <h4>Tumor Type</h4>\r\n            <p className='tumor'>{modelPrediction}</p>\r\n          </div>\r\n        )}\r\n        {heatMapImage && (\r\n          <div className=\"heat-map-container\">\r\n            <h4>Model Interpretation</h4>\r\n            <img src={map} alt=\"Heat Map\" className=\"heat-map-image\"/>\r\n          </div>\r\n)}\r\n        {analysisCompleted && (\r\n          <div className=\"results-options\">\r\n            <button className=\"btn btn-primary\">Save Results</button>\r\n            <button className=\"btn btn-primary\">Back</button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnalysisResult;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}